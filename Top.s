    AREA Top, CODE, READONLY 
      ENTRY	  
	
Main   
   MOV r0, 0x10000000
   MOV r1, 0x20000000
   
   LDR r2, =Matrix_data
   MOV r12, 0x60000000
   
   ;MOV r3, #0x39000000
   ;ADD r3, #0x00FF0000
   ;ADD r3, #0x00008000
   ;ADD r3, #0x0000003E
   ;MOV r4, #0xC1000000
   ;ADD r4, #0x00680000
   ;ADD r4, #0x00000000
   ;ADD r4, #0x00000000
   
   ;STR r3, [r1], #4
   ;STR r4, [r1], #-4
   
   ;BL Addition
   ;BL Subtraction
   ;BL Multiplication
   ;BL Division
   
   LDR r3, [r2], #4 ;r2 = size of matrix
   
   CMP r3, #1 ;when size is 1
   BLEQ Makeidentity1
   CMP r3, #2 ;when size is 2
   BLEQ Makeidentity2
   CMP r3, #3 ;when size is 3
   BLEQ Makeidentity3
   CMP r3, #4 ;when size is 4
   BLEQ Makeidentity4
   CMP r3, #5 ;when size is 5
   BLEQ Makeidentity5
   CMP r3, #6 ;when size is 6
   BLEQ Makeidentity10
   CMP r3, #7 ;when size is 7
   BLEQ Makeidentity10
   CMP r3, #8 ;when size is 8
   BLEQ Makeidentity10
   CMP r3, #9 ;when size is 9
   BLEQ Makeidentity10
   CMP r3, #10 ;when size is 10
   BLEQ Makeidentity10
   CMP r3, #11 ;when size is 11
   BLEQ Makeidentity20
   CMP r3, #12 ;when size is 12
   BLEQ Makeidentity20
   CMP r3, #13 ;when size is 13
   BLEQ Makeidentity20
   CMP r3, #14 ;when size is 14
   BLEQ Makeidentity20
   CMP r3, #15 ;when size is 15
   BLEQ Makeidentity20
   CMP r3, #16 ;when size is 16
   BLEQ Makeidentity20
   CMP r3, #17 ;when size is 17
   BLEQ Makeidentity20
   CMP r3, #18 ;when size is 18
   BLEQ Makeidentity20
   CMP r3, #19 ;when size is 19
   BLEQ Makeidentity20
   CMP r3, #20 ;when size is 20
   BLEQ Makeidentity20
   
   MOV pc, #0 ;Program end
   LTORG

Matrix_data ;label for input
	DCD 20
	DCD 2_01000001101000000000000000000000
	DCD 2_01000011011100000000000000000000
	DCD 2_01000001001001000000000000000000
	DCD 2_01000010010000000000000000000000
	DCD 2_01000001111100000000000000000000
	DCD 2_01000000000001000000000000000000
	DCD 2_01000000010100000000000000000000
	DCD 2_11000001100111000000000000000000
	DCD 2_01000011000110000000000000000000
	DCD 2_11000001101000000000000000000000
	DCD 2_01000011000000100000000000000000
	DCD 2_11000001001010000000000000000000
	DCD 2_01000001100100000000000000000000
	DCD 2_11000000110110000000000000000000
	DCD 2_11000010100101000000000000000000
	DCD 2_01000100010010000000000000000000
	DCD 2_11000000111010000000000000000000
	DCD 2_11000001101100000000000000000000
	DCD 2_11000100000111000000000000000000
	DCD 2_11000001010010000000000000000000
	DCD 2_01000011010001000000000000000000
	DCD 2_01000000001110000000000000000000
	DCD 2_01000011010010000000000000000000
	DCD 2_01000011001000000000000000000000
	DCD 2_11000011010110000000000000000000
	DCD 2_11000000010100000000000000000000
	DCD 2_11000100001101000000000000000000
	DCD 2_01000000111101000000000000000000
	DCD 2_11000011011011000000000000000000
	DCD 2_01000011010110000000000000000000
	DCD 2_01000010111010000000000000000000
	DCD 2_01000001110010000000000000000000
	DCD 2_01000011010111000000000000000000
	DCD 2_11000001101110000000000000000000
	DCD 2_11000100001110000000000000000000
	DCD 2_01000010111110000000000000000000
	DCD 2_01000000000101000000000000000000
	DCD 2_01000010001100000000000000000000
	DCD 2_01000001101000000000000000000000
	DCD 2_11000010000110000000000000000000
	DCD 2_11000001011000000000000000000000
	DCD 2_01000010110101000000000000000000
	DCD 2_11000011010110000000000000000000
	DCD 2_01000011111010000000000000000000
	DCD 2_01000100011010000000000000000000
	DCD 2_11000011111100000000000000000000
	DCD 2_11000000110100000000000000000000
	DCD 2_11000011100011000000000000000000
	DCD 2_01000000101001000000000000000000
	DCD 2_11000011110100000000000000000000
	DCD 2_11000010111110000000000000000000
	DCD 2_11000010101001000000000000000000
	DCD 2_01000011011110000000000000000000
	DCD 2_11000001101100000000000000000000
	DCD 2_11000011000110000000000000000000
	DCD 2_01000011110101000000000000000000
	DCD 2_01000010010101000000000000000000
	DCD 2_11000000100000000000000000000000
	DCD 2_11000000010001000000000000000000
	DCD 2_11000000100001000000000000000000
	DCD 2_01000011000101000000000000000000
	DCD 2_01000011011100000000000000000000
	DCD 2_01000000001110000000000000000000
	DCD 2_01000000010010000000000000000000
	DCD 2_11000010010010000000000000000000
	DCD 2_11000000011110000000000000000000
	DCD 2_11000011111110000000000000000000
	DCD 2_01000001000000100000000000000000
	DCD 2_01000010100111000000000000000000
	DCD 2_01000001000100000000000000000000
	DCD 2_11000000111000000000000000000000
	DCD 2_01000010101010000000000000000000
	DCD 2_11000100000011000000000000000000
	DCD 2_01000010110101000000000000000000
	DCD 2_11000100010100000000000000000000
	DCD 2_01000010000000000000000000000000
	DCD 2_01000010000101000000000000000000
	DCD 2_11000000110000000000000000000000
	DCD 2_01000011001111000000000000000000
	DCD 2_01000000100001000000000000000000
	DCD 2_11000001110100000000000000000000
	DCD 2_11000010001100000000000000000000
	DCD 2_01000000111100000000000000000000
	DCD 2_01000000101000000000000000000000
	DCD 2_01000010000111000000000000000000
	DCD 2_01000000111101000000000000000000
	DCD 2_01000011000101000000000000000000
	DCD 2_11000100010100000000000000000000
	DCD 2_01000010011100000000000000000000
	DCD 2_01000001001000000000000000000000
	DCD 2_11000001000001000000000000000000
	DCD 2_11000011000011000000000000000000
	DCD 2_01000001011101000000000000000000
	DCD 2_11000001110011000000000000000000
	DCD 2_01000001101100000000000000000000
	DCD 2_11000001000111000000000000000000
	DCD 2_01000001000010000000000000000000
	DCD 2_11000000010110000000000000000000
	DCD 2_11000011001000000000000000000000
	DCD 2_11000100001100000000000000000000
	DCD 2_11000011110110000000000000000000
	DCD 2_01000010010110000000000000000000
	DCD 2_01000100001010000000000000000000
	DCD 2_01000011111100000000000000000000
	DCD 2_01000000010111000000000000000000
	DCD 2_01000010111000000000000000000000
	DCD 2_01000001100000000000000000000000
	DCD 2_11000001001011000000000000000000
	DCD 2_11000011101100000000000000000000
	DCD 2_11000100010001000000000000000000
	DCD 2_01000010110110000000000000000000
	DCD 2_01000001101100000000000000000000
	DCD 2_11000001011001000000000000000000
	DCD 2_11000000011100000000000000000000
	DCD 2_11000000000010000000000000000000
	DCD 2_11000000000001000000000000000000
	DCD 2_01000011100100000000000000000000
	DCD 2_01000000010000000000000000000000
	DCD 2_01000010111110000000000000000000
	DCD 2_01000000110001000000000000000000
	DCD 2_01000100010000000000000000000000
	DCD 2_11000100001100000000000000000000
	DCD 2_11000001111100000000000000000000
	DCD 2_01000100010000000000000000000000
	DCD 2_11000011000000000000000000000000
	DCD 2_11000000111100000000000000000000
	DCD 2_11000001111000000000000000000000
	DCD 2_11000000111100000000000000000000
	DCD 2_11000000000001000000000000000000
	DCD 2_01000010111011000000000000000000
	DCD 2_11000001010101000000000000000000
	DCD 2_01000001000000100000000000000000
	DCD 2_01000001000000000000000000000000
	DCD 2_01000001010100000000000000000000
	DCD 2_11000010001110000000000000000000
	DCD 2_11000100011010000000000000000000
	DCD 2_01000001101000000000000000000000
	DCD 2_11000011100000000000000000000000
	DCD 2_01000001000001000000000000000000
	DCD 2_01000100000110000000000000000000
	DCD 2_01000000101110000000000000000000
	DCD 2_01000010001001000000000000000000
	DCD 2_11000011010110000000000000000000
	DCD 2_01000010101000000000000000000000
	DCD 2_11000000110010000000000000000000
	DCD 2_11000100011100000000000000000000
	DCD 2_01000001101101000000000000000000
	DCD 2_11000011000001000000000000000000
	DCD 2_01000011011000000000000000000000
	DCD 2_01000000111100000000000000000000
	DCD 2_01000100000000100000000000000000
	DCD 2_11000100011000000000000000000000
	DCD 2_01000000111011000000000000000000
	DCD 2_11000001011011000000000000000000
	DCD 2_11000001110111000000000000000000
	DCD 2_11000011111010000000000000000000
	DCD 2_11000000000000000000000000000000
	DCD 2_11000001011101000000000000000000
	DCD 2_11000011010110000000000000000000
	DCD 2_01000010111000000000000000000000
	DCD 2_11000000100001000000000000000000
	DCD 2_01000011100010000000000000000000
	DCD 2_01000000110100000000000000000000
	DCD 2_11000001110111000000000000000000
	DCD 2_11000010111000000000000000000000
	DCD 2_01000011101110000000000000000000
	DCD 2_11000000111110000000000000000000
	DCD 2_11000100000101000000000000000000
	DCD 2_01000001010100000000000000000000
	DCD 2_11000000010010000000000000000000
	DCD 2_11000001000000100000000000000000
	DCD 2_01000001000110000000000000000000
	DCD 2_01000000100100000000000000000000
	DCD 2_11000011010111000000000000000000
	DCD 2_01000000011010000000000000000000
	DCD 2_11000100010010000000000000000000
	DCD 2_01000010111110000000000000000000
	DCD 2_11000011001010000000000000000000
	DCD 2_11000100000001000000000000000000
	DCD 2_01000001001100000000000000000000
	DCD 2_01000011111111000000000000000000
	DCD 2_01000000010100000000000000000000
	DCD 2_01000000011011000000000000000000
	DCD 2_11000100010001000000000000000000
	DCD 2_11000010010010000000000000000000
	DCD 2_01000100000000000000000000000000
	DCD 2_11000011000111000000000000000000
	DCD 2_01000010101100000000000000000000
	DCD 2_01000011110000000000000000000000
	DCD 2_11000100010000000000000000000000
	DCD 2_11000001001001000000000000000000
	DCD 2_11000010100010000000000000000000
	DCD 2_01000010111100000000000000000000
	DCD 2_11000000000001000000000000000000
	DCD 2_11000100000011000000000000000000
	DCD 2_01000000011100000000000000000000
	DCD 2_11000001011001000000000000000000
	DCD 2_11000001101110000000000000000000
	DCD 2_01000000011010000000000000000000
	DCD 2_01000010100011000000000000000000
	DCD 2_11000001111100000000000000000000
	DCD 2_11000010100100000000000000000000
	DCD 2_11000011011100000000000000000000
	DCD 2_11000000000000000000000000000000
	DCD 2_01000001010100000000000000000000
	DCD 2_01000011001001000000000000000000
	DCD 2_11000001010110000000000000000000
	DCD 2_01000100000010000000000000000000
	DCD 2_01000000111110000000000000000000
	DCD 2_11000010011010000000000000000000
	DCD 2_01000011110000000000000000000000
	DCD 2_01000100011000000000000000000000
	DCD 2_11000001110000000000000000000000
	DCD 2_01000001001110000000000000000000
	DCD 2_01000001011110000000000000000000
	DCD 2_01000011011001000000000000000000
	DCD 2_01000001100010000000000000000000
	DCD 2_11000100001010000000000000000000
	DCD 2_11000010110001000000000000000000
	DCD 2_11000001010000000000000000000000
	DCD 2_01000000111010000000000000000000
	DCD 2_11000011011011000000000000000000
	DCD 2_01000010001000000000000000000000
	DCD 2_01000001010011000000000000000000
	DCD 2_01000011001000000000000000000000
	DCD 2_01000010100000000000000000000000
	DCD 2_11000010010010000000000000000000
	DCD 2_11000010001000000000000000000000
	DCD 2_11000001011010000000000000000000
	DCD 2_01000000011110000000000000000000
	DCD 2_01000000111000000000000000000000
	DCD 2_01000000001010000000000000000000
	DCD 2_01000001010110000000000000000000
	DCD 2_11000010011100000000000000000000
	DCD 2_01000010011001000000000000000000
	DCD 2_01000001100100000000000000000000
	DCD 2_11000000011111000000000000000000
	DCD 2_11000001100010000000000000000000
	DCD 2_01000100011000000000000000000000
	DCD 2_01000011100011000000000000000000
	DCD 2_01000100010100000000000000000000
	DCD 2_01000001100100000000000000000000
	DCD 2_11000011000100000000000000000000
	DCD 2_11000011001000000000000000000000
	DCD 2_01000100011100000000000000000000
	DCD 2_11000001001111000000000000000000
	DCD 2_11000100001100000000000000000000
	DCD 2_01000000110111000000000000000000
	DCD 2_01000100000011000000000000000000
	DCD 2_11000000101111000000000000000000
	DCD 2_11000001000000000000000000000000
	DCD 2_11000010111011000000000000000000
	DCD 2_01000001100001000000000000000000
	DCD 2_01000011000001000000000000000000
	DCD 2_11000001011100000000000000000000
	DCD 2_11000010001111000000000000000000
	DCD 2_01000010111111000000000000000000
	DCD 2_01000011000000000000000000000000
	DCD 2_11000000000000000000000000000000
	DCD 2_01000001100010000000000000000000
	DCD 2_11000100011000000000000000000000
	DCD 2_01000000100000000000000000000000
	DCD 2_11000001100000000000000000000000
	DCD 2_11000011101111000000000000000000
	DCD 2_11000010110100000000000000000000
	DCD 2_01000000111110000000000000000000
	DCD 2_01000011110011000000000000000000
	DCD 2_01000010100010000000000000000000
	DCD 2_01000100000000000000000000000000
	DCD 2_01000000010010000000000000000000
	DCD 2_11000010011011000000000000000000
	DCD 2_11000011101100000000000000000000
	DCD 2_11000011111101000000000000000000
	DCD 2_01000001101001000000000000000000
	DCD 2_01000011110100000000000000000000
	DCD 2_01000001001101000000000000000000
	DCD 2_01000010100010000000000000000000
	DCD 2_01000000111100000000000000000000
	DCD 2_11000001101000000000000000000000
	DCD 2_11000010001100000000000000000000
	DCD 2_01000010001010000000000000000000
	DCD 2_11000001100010000000000000000000
	DCD 2_01000000110100000000000000000000
	DCD 2_11000001101100000000000000000000
	DCD 2_01000010001110000000000000000000
	DCD 2_01000001001010000000000000000000
	DCD 2_11000001001000000000000000000000
	DCD 2_11000010011010000000000000000000
	DCD 2_11000010111100000000000000000000
	DCD 2_11000001100000000000000000000000
	DCD 2_01000011110011000000000000000000
	DCD 2_01000000000101000000000000000000
	DCD 2_11000000011011000000000000000000
	DCD 2_11000010010111000000000000000000
	DCD 2_11000001011101000000000000000000
	DCD 2_11000000101000000000000000000000
	DCD 2_01000011011000000000000000000000
	DCD 2_01000000100010000000000000000000
	DCD 2_11000001100001000000000000000000
	DCD 2_11000000100001000000000000000000
	DCD 2_11000010110011000000000000000000
	DCD 2_11000010010001000000000000000000
	DCD 2_11000000101000000000000000000000
	DCD 2_11000000101000000000000000000000
	DCD 2_11000011010101000000000000000000
	DCD 2_11000001101000000000000000000000
	DCD 2_01000011100010000000000000000000
	DCD 2_01000001010110000000000000000000
	DCD 2_11000000000100000000000000000000
	DCD 2_11000011111110000000000000000000
	DCD 2_11000000000000000000000000000000
	DCD 2_11000100000010000000000000000000
	DCD 2_11000010111100000000000000000000
	DCD 2_01000001110100000000000000000000
	DCD 2_11000010010001000000000000000000
	DCD 2_11000000011000000000000000000000
	DCD 2_01000000001000000000000000000000
	DCD 2_01000011010110000000000000000000
	DCD 2_01000001100101000000000000000000
	DCD 2_11000000100010000000000000000000
	DCD 2_11000011001000000000000000000000
	DCD 2_01000000001110000000000000000000
	DCD 2_01000000011010000000000000000000
	DCD 2_01000100000000000000000000000000
	DCD 2_01000000011110000000000000000000
	DCD 2_01000011101001000000000000000000
	DCD 2_01000010001100000000000000000000
	DCD 2_01000010100000000000000000000000
	DCD 2_01000010010100000000000000000000
	DCD 2_01000001001010000000000000000000
	DCD 2_11000011110100000000000000000000
	DCD 2_01000001110110000000000000000000
	DCD 2_11000000110011000000000000000000
	DCD 2_01000000001010000000000000000000
	DCD 2_01000011101000000000000000000000
	DCD 2_01000000110010000000000000000000
	DCD 2_01000010101100000000000000000000
	DCD 2_01000010000110000000000000000000
	DCD 2_11000011101000000000000000000000
	DCD 2_01000010010111000000000000000000
	DCD 2_11000001100010000000000000000000
	DCD 2_11000000111000000000000000000000
	DCD 2_01000001110010000000000000000000
	DCD 2_11000011011000000000000000000000
	DCD 2_11000001101100000000000000000000
	DCD 2_11000001110010000000000000000000
	DCD 2_01000010010000000000000000000000
	DCD 2_01000000011111000000000000000000
	DCD 2_11000001000000100000000000000000
	DCD 2_11000001010011000000000000000000
	DCD 2_11000000101110000000000000000000
	DCD 2_11000011011001000000000000000000
	DCD 2_01000001000101000000000000000000
	DCD 2_11000100000000000000000000000000
	DCD 2_01000010101110000000000000000000
	DCD 2_11000010010000000000000000000000
	DCD 2_11000011100101000000000000000000
	DCD 2_01000011000000000000000000000000
	DCD 2_01000010000000000000000000000000
	DCD 2_11000010010100000000000000000000
	DCD 2_11000000111000000000000000000000
	DCD 2_11000100000000000000000000000000
	DCD 2_01000010000000000000000000000000
	DCD 2_11000001100110000000000000000000
	DCD 2_01000011011010000000000000000000
	DCD 2_11000010000010000000000000000000
	DCD 2_11000010010100000000000000000000
	DCD 2_11000000000010000000000000000000
	DCD 2_01000010111110000000000000000000
	DCD 2_11000001111000000000000000000000
	DCD 2_01000001100101000000000000000000
	DCD 2_11000010101010000000000000000000
	DCD 2_11000000000000100000000000000000
	DCD 2_01000000011011000000000000000000
	DCD 2_01000001101000000000000000000000
	DCD 2_11000010100100000000000000000000
	DCD 2_01000000101010000000000000000000
	DCD 2_11000011011110000000000000000000
	DCD 2_11000010000001000000000000000000
	DCD 2_11000001001110000000000000000000
	DCD 2_11000001110001000000000000000000
	DCD 2_11000001110100000000000000000000
	DCD 2_11000001100110000000000000000000
	DCD 2_01000011011001000000000000000000
	DCD 2_01000010010000000000000000000000
	DCD 2_11000001000101000000000000000000
	DCD 2_01000000000000000000000000000000
	DCD 2_11000001110111000000000000000000
	DCD 2_01000010101000000000000000000000
	DCD 2_11000011110101000000000000000000
	DCD 2_01000000111111000000000000000000
	DCD 2_01000001000100000000000000000000
	DCD 2_01000011000100000000000000000000
	DCD 2_01000011001100000000000000000000
	DCD 2_01000100011110000000000000000000
	DCD 2_11000011011001000000000000000000
	DCD 2_01000000110101000000000000000000
	DCD 2_11000000001010000000000000000000
	DCD 2_01000001001100000000000000000000
	DCD 2_01000000110100000000000000000000
		
Makeidentity1 ;when matrix is 1x1
   LDR r3, [r2], #4 ;r3 = first element of matrix (a)
   MOV r4, #0x3F800000
   STR r4, [r1], #4 ;store 1
   STR r3, [r1], #-8 ;store a
   BL Division 
   LDR r5, [r0] ;load 1/a
   STR r5, [r12] ;first element of inverse matrix is 1/a
   
   MOV pc, #0 ;Program end
   LTORG
   
Makeidentity2 ;when matrix is 2x2
   LDR r3, [r2], #4 ;r3 = 11 element of matrix (a)
   LDR r4, [r2], #4 ;r4 = 12 element of matrix (b)
   LDR r5, [r2], #4 ;r5 = 21 element of matrix (c)
   LDR r6, [r2], #4 ;r6 = 22 element of matrix (d)
   
   STR r3, [r1], #4
   STR r6, [r1], #-4
   BL Multiplication
   LDR r7, [r0] ;get ad
   
   STR r4, [r1], #4
   STR r5, [r1], #-4
   BL Multiplication
   LDR r8, [r0] ;get bc
   
   STR r7, [r1], #4
   STR r8, [r1], #-4
   BL Subtraction
   LDR r9, [r0] ;get ad - bc
   
   MOV r10, #0x3F800000
   STR r10, [r1], #4
   STR r9, [r1], #-4
   BL Division
   LDR r11, [r0] ;get 1 / (ad - bc)
   
   STR r11, [r1], #4
   STR r6, [r1], #-4
   BL Multiplication ;get (1 / (ad - bc)) * d
   LDR r7, [r0] ;get 11 element of inverse matrix
   STR r7, [r12], #4 ;store 11 element of inverse matrix
   
   MOV r9, #0x00000000
   
   STR r9, [r1], #4
   STR r4, [r1], #-4
   BL Subtraction
   LDR r8, [r0] ;get -b   
   STR r11, [r1], #4
   STR r8, [r1], #-4
   BL Multiplication ;get (1 / (ad - bc)) * (-b)
   LDR r7, [r0] ;get 12 element of inverse matrix
   STR r7, [r12], #4 ;store 12 element of inverse matrix
   
   STR r9, [r1], #4
   STR r5, [r1], #-4
   BL Subtraction
   LDR r8, [r0] ;get -c
   STR r11, [r1], #4
   STR r8, [r1], #-4
   BL Multiplication ;get (1 / (ad - bc)) * (-c)
   LDR r7, [r0] ;get 21 element of inverse matrix
   STR r7, [r12], #4 ;store 21 element of inverse matrix
   
   STR r11, [r1], #4
   STR r3, [r1], #-4
   BL Multiplication ;get (1 / (ad - bc)) * a
   LDR r7, [r0] ;get 22 element of inverse matrix
   STR r7, [r12], #4 ;store 22 element of inverse matrix
   
   MOV pc, #0 ;Program end
   LTORG

Makeidentity3
   LDR r12, =Matrix_data ;r12 = address of given matrix
   LDR r9, [r12], #4 ;get size
   MOV r11, 0x50000000
   STR r9, [r11] ;store size
   MOV r11, 0x30000000 ;r11 = address of first matrix
   MOV r10, 0x60000000 ;r10 = address of second matrix
   LDMFD r12, {r0 - r8}
   STMEA r11, {r0 - r8} ;store copy of given matrix
   MOV r0, #0x3F800000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   
   MOV r3, #0x00000000 
   MOV r4, #0x3F800000
   MOV r5, #0x00000000 
   
   MOV r6, #0x00000000  ;1 0 0
   MOV r7, #0x00000000  ;0 1 0
   MOV r8, #0x3F800000  ;0 0 1
   STMEA r10, {r0 - r8} ;store identity matrix
   
   ;m1[i][j] = 0x30000000 + 12 * (i-1) + 4 * (j-1)
   ;m2[i][j] = 0x40000000 + 12 * (i-1) + 4 * (j-1)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   
   LDR r0, [r11], #12 ;m1[1][1] (a)
   LDR r1, [r11], #-12 ;m1[2][1] (d)
   ;compare m1[1][1] and m1[2][1]
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #12
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], #12 ;(a)
   LDR r1, [r11], #-12 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #12
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;? ? ?
   ;0 ? ?
   ;? ? ?
   
   LDR r0, [r11], #24 ;m1[1][1] (a)
   LDR r1, [r11], #-24 ;m1[3][1] (g)
   ;compare m1[1][1] and m1[3][1]
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #24
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], #24 ;(a)
   LDR r1, [r11], #-24 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get g/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -g/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #24
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;? ? ?
   ;0 ? ?
   ;0 ? ?
   
   ADD r11, #16
   LDR r0, [r11], #12 ;m1[2][2] (e)
   LDR r1, [r11], #-28 ;m1[3][2] (h)
   ;compare m1[2][2] and m1[3][2]
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #12
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #24
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #16
   LDR r0, [r11], #12 ;(a)
   LDR r1, [r11], #-28 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get h/e
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -h/e
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #12
   STR r7, [r6], #4 ;store i
   MOV r7, #24
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;? ? ?
   ;0 ? ?
   ;0 0 ?
   ;now, given matrix -> upper matrix
   
   ADD r11, #32
   LDR r0, [r11], #-12 ;m1[3][3] (i)
   LDR r1, [r11], #-20 ;m1[2][3] (f)
   ;compare m1[3][3] and m1[2][3]
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #24
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #12
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #32
   LDR r0, [r11], #-12 ;(a)
   LDR r1, [r11], #-20 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get f/i
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -f/i
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #24
   STR r7, [r6], #4 ;store i
   MOV r7, #12
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;? ? ?
   ;0 ? 0
   ;0 0 ?
   
   ADD r11, #32
   LDR r0, [r11], #-24 ;m1[3][3] (i)
   LDR r1, [r11], #-8 ;m1[1][3] (c)
   ;compare m1[3][3] and m1[1][3]
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #24
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #32
   LDR r0, [r11], #-24 ;(a)
   LDR r1, [r11], #-8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get c/i
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -c/i
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #24
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;? ? 0
   ;0 ? 0
   ;0 0 ?
   
   ADD r11, #16
   LDR r0, [r11], #-12 ;m1[2][2] (e)
   LDR r1, [r11], #-4 ;m1[1][2] (b)
   ;compare m1[2][2] and m1[1][2]
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #12
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #16
   LDR r0, [r11], #-12 ;(a)
   LDR r1, [r11], #-4 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get b/e
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -b/e
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #12
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;? 0 0
   ;0 ? 0
   ;0 0 ?
   
   ADD r11, #0
   LDR r0, [r11] ;m1[1][1]
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;1 0 0
   ;0 ? 0
   ;0 0 ?
   
   ADD r11, #16
   LDR r0, [r11], #-16 ;m1[2][2]
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/e
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #12
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;1 0 0
   ;0 1 0
   ;0 0 ?
   
   ADD r11, #32
   LDR r0, [r11], #-32 ;m1[3][3]
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/i
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #24
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;1 0 0
   ;0 1 0
   ;0 0 1
   ;now upper triangle -> identity matrix

   MOV pc, #0 ;Program end
   LTORG
   
Makeidentity4
   LDR r12, =Matrix_data ;r12 = address of given matrix
   LDR r9, [r12], #4 ;get size
   MOV r11, 0x50000000
   STR r9, [r11] ;store size
   MOV r11, 0x30000000 ;r11 = address of first matrix
   MOV r10, 0x60000000 ;r10 = address of second matrix
   LDMFD r12, {r0 - r3}
   ADD r12, #16
   STMEA r11, {r0 - r3}
   ADD r11, #16
   LDMFD r12, {r0 - r3}
   ADD r12, #16
   STMEA r11, {r0 - r3}
   ADD r11, #16
   LDMFD r12, {r0 - r3}
   ADD r12, #16
   STMEA r11, {r0 - r3} 
   ADD r11, #16
   LDMFD r12, {r0 - r3}
   SUB r12, #48
   STMEA r11, {r0 - r3}
   SUB r11, #48
   ;store copy of given matrix
   MOV r0, #0x3F800000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   STMEA r10, {r0 - r3} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x3F800000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   ADD r10, #16
   STMEA r10, {r0 - r3} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x3F800000 
   MOV r3, #0x00000000
   ADD r10, #16
   STMEA r10, {r0 - r3} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x3F800000
   ADD r10, #16
   STMEA r10, {r0 - r3} ;store identity matrix
   SUB r10, #48
   ;m1[i][j] = 0x30000000 + 12 * (i-1) + 4 * (j-1)
   ;m2[i][j] = 0x40000000 + 12 * (i-1) + 4 * (j-1)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   
   ADD r11, #0
   LDR r0, [r11], #16 ;(a)
   LDR r1, [r11], #-16 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #16
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], #16 ;(a)
   LDR r1, [r11], #-16 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #16
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;1
   
   ADD r11, #0
   LDR r0, [r11], #32 ;(a)
   LDR r1, [r11], #-32 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #32
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], #32 ;(a)
   LDR r1, [r11], #-32 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #32
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;2
   
   ADD r11, #0
   LDR r0, [r11], #48 ;(a)
   LDR r1, [r11], #-48 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #48
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], #48 ;(a)
   LDR r1, [r11], #-48 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #48
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;3
   
   ADD r11, #20
   LDR r0, [r11], #16 ;(a)
   LDR r1, [r11], #-36 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #16
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #32
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #20
   LDR r0, [r11], #16 ;(a)
   LDR r1, [r11], #-36 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #16
   STR r7, [r6], #4 ;store i
   MOV r7, #32
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;4
   
   ADD r11, #20
   LDR r0, [r11], #32 ;(a)
   LDR r1, [r11], #-52 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #16
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #48
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #20
   LDR r0, [r11], #32 ;(a)
   LDR r1, [r11], #-52 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #16
   STR r7, [r6], #4 ;store i
   MOV r7, #48
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;5
   
   ADD r11, #40
   LDR r0, [r11], #16 ;(a)
   LDR r1, [r11], #-56 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #32
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #48
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #40
   LDR r0, [r11], #16 ;(a)
   LDR r1, [r11], #-56 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #32
   STR r7, [r6], #4 ;store i
   MOV r7, #48
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;6
   
   ADD r11, #60
   LDR r0, [r11], #-16 ;(a)
   LDR r1, [r11], #-44 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #48
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #32
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #60
   LDR r0, [r11], #-16 ;(a)
   LDR r1, [r11], #-44 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #48
   STR r7, [r6], #4 ;store i
   MOV r7, #32
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;7
   
   ADD r11, #60
   LDR r0, [r11], #-32 ;(a)
   LDR r1, [r11], #-28 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #48
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #16
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #60
   LDR r0, [r11], #-32 ;(a)
   LDR r1, [r11], #-28 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #48
   STR r7, [r6], #4 ;store i
   MOV r7, #16
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;8
   
   ADD r11, #60
   LDR r0, [r11], #-48 ;(a)
   LDR r1, [r11], #-12 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #48
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #60
   LDR r0, [r11], #-48 ;(a)
   LDR r1, [r11], #-12 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #48
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;9
   
   ADD r11, #40
   LDR r0, [r11], #-16 ;(a)
   LDR r1, [r11], #-24 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #32
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #16
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #40
   LDR r0, [r11], #-16 ;(a)
   LDR r1, [r11], #-24 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #32
   STR r7, [r6], #4 ;store i
   MOV r7, #16
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;10
   
   ADD r11, #40
   LDR r0, [r11], #-32 ;(a)
   LDR r1, [r11], #-8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #32
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #40
   LDR r0, [r11], #-32 ;(a)
   LDR r1, [r11], #-8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #32
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;11
   
   ADD r11, #20
   LDR r0, [r11], #-16 ;(a)
   LDR r1, [r11], #-4 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #16
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #20
   LDR r0, [r11], #-16 ;(a)
   LDR r1, [r11], #-4 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #16
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;12
   
   ADD r11, #0
   LDR r0, [r11], #0 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;1
   
   ADD r11, #20
   LDR r0, [r11], #-20 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #16
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;2
   
   ADD r11, #40
   LDR r0, [r11], #-40 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #32
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;3
   
   ADD r11, #60
   LDR r0, [r11], #-60 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #48
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;4

   MOV pc, #0 ;Program end
   LTORG
   
Makeidentity5
   LDR r12, =Matrix_data ;r12 = address of given matrix
   LDR r9, [r12], #4 ;get size
   MOV r11, 0x50000000
   STR r9, [r11] ;store size
   MOV r11, 0x30000000 ;r11 = address of first matrix
   MOV r10, 0x60000000 ;r10 = address of second matrix
   LDMFD r12, {r0 - r4}
   ADD r12, #20
   STMEA r11, {r0 - r4}
   ADD r11, #20
   LDMFD r12, {r0 - r4}
   ADD r12, #20
   STMEA r11, {r0 - r4}
   ADD r11, #20
   LDMFD r12, {r0 - r4}
   ADD r12, #20
   STMEA r11, {r0 - r4} 
   ADD r11, #20
   LDMFD r12, {r0 - r4}
   ADD r12, #20
   STMEA r11, {r0 - r4} 
   ADD r11, #20
   LDMFD r12, {r0 - r4}
   SUB r12, #80
   STMEA r11, {r0 - r4}
   SUB r11, #80
   ;store copy of given matrix
   MOV r0, #0x3F800000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   STMEA r10, {r0 - r4} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x3F800000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   ADD r10, #20
   STMEA r10, {r0 - r4} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x3F800000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   ADD r10, #20
   STMEA r10, {r0 - r4} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x3F800000
   MOV r4, #0x00000000
   ADD r10, #20
   STMEA r10, {r0 - r4} ;store identity matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x3F800000
   ADD r10, #20
   STMEA r10, {r0 - r4} ;store identity matrix
   SUB r10, #60
   ;m1[i][j] = 0x30000000 + 12 * (i-1) + 4 * (j-1)
   ;m2[i][j] = 0x40000000 + 12 * (i-1) + 4 * (j-1)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   
   ADD r11, #0
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-20 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #20
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #0
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-20 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #20
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;1
   
   ADD r11, #0
   LDR r0, [r11], #40 ;(a)
   LDR r1, [r11], #-40 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #40
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #0
   LDR r0, [r11], #40 ;(a)
   LDR r1, [r11], #-40 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #40
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;2
   
   ADD r11, #0
   LDR r0, [r11], #60 ;(a)
   LDR r1, [r11], #-60 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #60
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #0
   LDR r0, [r11], #60 ;(a)
   LDR r1, [r11], #-60 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #60
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;3
   
   ADD r11, #0
   LDR r0, [r11], #80 ;(a)
   LDR r1, [r11], #-80 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #80
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #0
   LDR r0, [r11], #80 ;(a)
   LDR r1, [r11], #-80 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, #80
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;4
   
   ADD r11, #24
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-44 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #20
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #40
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #24
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-44 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #20
   STR r7, [r6], #4 ;store i
   MOV r7, #40
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;5
   
   ADD r11, #24
   LDR r0, [r11], #40 ;(a)
   LDR r1, [r11], #-64 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #20
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #60
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #24
   LDR r0, [r11], #40 ;(a)
   LDR r1, [r11], #-64 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #20
   STR r7, [r6], #4 ;store i
   MOV r7, #60
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;6
   
   ADD r11, #24
   LDR r0, [r11], #60 ;(a)
   LDR r1, [r11], #-84 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #20
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #80
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #24
   LDR r0, [r11], #60 ;(a)
   LDR r1, [r11], #-84 ;(d))
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #20
   STR r7, [r6], #4 ;store i
   MOV r7, #80
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;7
   
   ADD r11, #48
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-68 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #40
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #60
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #48
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-68 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, #60
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;8
   
   ADD r11, #48
   LDR r0, [r11], #40 ;(a)
   LDR r1, [r11], #-88 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #40
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #80
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #48
   LDR r0, [r11], #40 ;(a)
   LDR r1, [r11], #-88 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, #80
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;9
   
   ADD r11, #72
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-92 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #60
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #80
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #72
   LDR r0, [r11], #20 ;(a)
   LDR r1, [r11], #-92 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #60
   STR r7, [r6], #4 ;store i
   MOV r7, #80
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;10
   
   ADD r11, #96
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-76 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #60
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #96
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-76 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, #60
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;11
   
   ADD r11, #96
   LDR r0, [r11], #-40 ;(a)
   LDR r1, [r11], #-56 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #40
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #96
   LDR r0, [r11], #-40 ;(a)
   LDR r1, [r11], #-56 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, #40
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;12
   
   ADD r11, #96
   LDR r0, [r11], #-60 ;(a)
   LDR r1, [r11], #-36 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #20
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #96
   LDR r0, [r11], #-60 ;(a)
   LDR r1, [r11], #-36 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, #20
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;13
   
   ADD r11, #96
   LDR r0, [r11], #-80 ;(a)
   LDR r1, [r11], #-16 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #96
   LDR r0, [r11], #-80 ;(a)
   LDR r1, [r11], #-16 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;14
   
   ADD r11, #72
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-52 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #60
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #40
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #72
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-52 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #60
   STR r7, [r6], #4 ;store i
   MOV r7, #40
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;15
   
   ADD r11, #72
   LDR r0, [r11], #-40 ;(a)
   LDR r1, [r11], #-32 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #60
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #20
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #72
   LDR r0, [r11], #-40 ;(a)
   LDR r1, [r11], #-32 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #60
   STR r7, [r6], #4 ;store i
   MOV r7, #20
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;16
   
   ADD r11, #72
   LDR r0, [r11], #-60 ;(a)
   LDR r1, [r11], #-12 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #60
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #72
   LDR r0, [r11], #-60 ;(a)
   LDR r1, [r11], #-12 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #60
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;17
   
   ADD r11, #48
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-28 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #40
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #20
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #48
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-28 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, #20
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;18
   
   ADD r11, #48
   LDR r0, [r11], #-40 ;(a)
   LDR r1, [r11], #-8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #40
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #48
   LDR r0, [r11], #-40 ;(a)
   LDR r1, [r11], #-8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;19
   
   ADD r11, #24
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-4 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #20
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   ADD r11, #24
   LDR r0, [r11], #-20 ;(a)
   LDR r1, [r11], #-4 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #20
   STR r7, [r6], #4 ;store i
   MOV r7, #0
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   ;20
   
   ADD r11, #0
   LDR r0, [r11], #0 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;1
   
   ADD r11, #24
   LDR r0, [r11], #-24 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #20
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;2
   
   ADD r11, #48
   LDR r0, [r11], #-48 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;3
   
   ADD r11, #72
   LDR r0, [r11], #-72 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #60
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;4
   
   ADD r11, #96
   LDR r0, [r11], #-96 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r5, 0x50000000
   STR r9, [r5] ;store size
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   ;5

   MOV pc, #0 ;Program end
   LTORG
   
Makeidentity10
   LDR r12, =Matrix_data ;r12 = address of given matrix
   LDR r9, [r12], #4 ;get size
   MOV r11, 0x50000000
   STR r9, [r11] ;store size
   MOV r11, 0x30000000 ;r11 = address of first matrix
   MOV r10, #0
   CMP r9, #6
   BEQ Loop6
   CMP r9, #7
   BEQ Loop7
   CMP r9, #8
   BEQ Loop8
   CMP r9, #9
   BEQ Loop9  
   CMP r9, #10
   BEQ Loop10
   LTORG
   
Loop6 ;loop for 6 times
   LDMFD r12, {r0 - r5}
   ADD r12, #24
   STMEA r11, {r0 - r5}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #6
   BNE Loop6
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   SUB r10, #360
   
   MOV r0, #0x3F800000
   STR r0, [r10], #44 ;store 1 (1)
   STR r0, [r10], #44 ;store 1 (2)
   STR r0, [r10], #44 ;store 1 (3)
   STR r0, [r10], #44 ;store 1 (4)
   STR r0, [r10], #44 ;store 1 (5)
   STR r0, [r10], #-220 ;store 1 (6)
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   
   B Loop10_1
   LTORG
   
Loop7 ;loop for 6 times
   LDMFD r12, {r0 - r6}
   ADD r12, #28
   STMEA r11, {r0 - r6}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #7
   BNE Loop7
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   SUB r10, #360
   
   MOV r0, #0x3F800000
   STR r0, [r10], #44 ;store 1 (1)
   STR r0, [r10], #44 ;store 1 (2)
   STR r0, [r10], #44 ;store 1 (3)
   STR r0, [r10], #44 ;store 1 (4)
   STR r0, [r10], #44 ;store 1 (5)
   STR r0, [r10], #44 ;store 1 (6)
   STR r0, [r10], #-264 ;store 1 (7)
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   
   B Loop10_1 
   LTORG
   
Loop8 ;loop for 8 times
   LDMFD r12, {r0 - r7}
   ADD r12, #32
   STMEA r11, {r0 - r7}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #8
   BNE Loop8
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   SUB r10, #360
   
   MOV r0, #0x3F800000
   STR r0, [r10], #44 ;store 1 (1)
   STR r0, [r10], #44 ;store 1 (2)
   STR r0, [r10], #44 ;store 1 (3)
   STR r0, [r10], #44 ;store 1 (4)
   STR r0, [r10], #44 ;store 1 (5)
   STR r0, [r10], #44 ;store 1 (6)
   STR r0, [r10], #44 ;store 1 (7)
   STR r0, [r10], #-308 ;store 1 (8)
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   
   B Loop10_1 
   LTORG
   
Loop9 ;loop for 9 times
   LDMFD r12, {r0 - r8}
   ADD r12, #36
   STMEA r11, {r0 - r8}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #9
   BNE Loop9
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   SUB r10, #360
   
   MOV r0, #0x3F800000
   STR r0, [r10], #44 ;store 1 (1)
   STR r0, [r10], #44 ;store 1 (2)
   STR r0, [r10], #44 ;store 1 (3)
   STR r0, [r10], #44 ;store 1 (4)
   STR r0, [r10], #44 ;store 1 (5)
   STR r0, [r10], #44 ;store 1 (6)
   STR r0, [r10], #44 ;store 1 (7)
   STR r0, [r10], #44 ;store 1 (8)
   STR r0, [r10], #-352 ;store 1 (9)
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   
   B Loop10_1 
   LTORG
   
Loop10 ;loop for 10 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #10
   BNE Loop10
   SUB r11, #400
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   SUB r10, #360
   
   MOV r0, #0x3F800000
   STR r0, [r10], #44 ;store 1 (1)
   STR r0, [r10], #44 ;store 1 (2)
   STR r0, [r10], #44 ;store 1 (3)
   STR r0, [r10], #44 ;store 1 (4)
   STR r0, [r10], #44 ;store 1 (5)
   STR r0, [r10], #44 ;store 1 (6)
   STR r0, [r10], #44 ;store 1 (7)
   STR r0, [r10], #44 ;store 1 (8)
   STR r0, [r10], #44 ;store 1 (9)
   STR r0, [r10], #-396 ;store 1 (10)
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   ADD r11, #0
   B Loop10_1
   LTORG

Loop10_1
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #360
   BNE Loop10_1
   SUB r11, #0
    
   MOV r8, #0
   ADD r11, #44
Loop10_2
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #40
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #40
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #40
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #320
   BNE Loop10_2
   SUB r11, #44
    
   MOV r8, #0
   ADD r11, #88
Loop10_3
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #80
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #80
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #280
   BNE Loop10_3
   SUB r11, #88
    
   MOV r8, #0
   ADD r11, #132
Loop10_4
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #120
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #120
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #120
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #120
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #240
   BNE Loop10_4
   SUB r11, #132
   
   MOV r8, #0
   ADD r11, #176
Loop10_5
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #160
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #160
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #160
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #160
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #200
   BNE Loop10_5
   SUB r11, #176
    
   MOV r8, #0
   ADD r11, #220
Loop10_6
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #200
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #200
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #200
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #200
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #160
   BNE Loop10_6
   SUB r11, #220
    
   MOV r8, #0
   ADD r11, #264
Loop10_7
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #240
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #240
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #240
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #240
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #120
   BNE Loop10_7
   SUB r11, #264
   
   MOV r8, #0
   ADD r11, #308
Loop10_8
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #280
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #280
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #280
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #280
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #80
   BNE Loop10_8
   SUB r11, #308
     
   MOV r8, #0
   ADD r11, #352
Loop10_9
   ADD r8, #40
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #320
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #320
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #320
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #320
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #40
   BNE Loop10_9
   SUB r11, #352
   ;now upper upper triangle
     
   MOV r8, #396
Loop10_10
   SUB r8, #40
   ADD r11, #396
   LDR r0, [r11], #-396 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #360
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #36
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #396
   LDR r0, [r11], #-396 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #360
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #36
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #36
   BNE Loop10_10
   
   MOV r8, #352
Loop10_11
   SUB r8, #40
   ADD r11, #352
   LDR r0, [r11], #-352 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #320
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #32
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #352
   LDR r0, [r11], #-352 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #320
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #32
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #32
   BNE Loop10_11
   
   MOV r8, #308
Loop10_12
   SUB r8, #40
   ADD r11, #308
   LDR r0, [r11], #-308 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #280
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #28
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #308
   LDR r0, [r11], #-308 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #280
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #28
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #28
   BNE Loop10_12
    
   MOV r8, #264
Loop10_13
   SUB r8, #40
   ADD r11, #264
   LDR r0, [r11], #-264 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #240
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #24
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #264
   LDR r0, [r11], #-264 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #240
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #24
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #24
   BNE Loop10_13
      
   MOV r8, #220
Loop10_14
   SUB r8, #40
   ADD r11, #220
   LDR r0, [r11], #-220 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #200
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #20
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #220
   LDR r0, [r11], #-220 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #200
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #20
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #20
   BNE Loop10_14
     
   MOV r8, #176
Loop10_15
   SUB r8, #40
   ADD r11, #176
   LDR r0, [r11], #-176 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #160
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #16
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #176
   LDR r0, [r11], #-176 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #160
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #16
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #16
   BNE Loop10_15
   
   MOV r8, #132
Loop10_16
   SUB r8, #40
   ADD r11, #132
   LDR r0, [r11], #-132 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #120
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #12
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #132
   LDR r0, [r11], #-132 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #120
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #12
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #12
   BNE Loop10_16
   
   MOV r8, #88
Loop10_17
   SUB r8, #40
   ADD r11, #88
   LDR r0, [r11], #-88 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #8
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #88
   LDR r0, [r11], #-88 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #8
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #8
   BNE Loop10_17
   
   MOV r8, #44
Loop10_18
   SUB r8, #40
   ADD r11, #44
   LDR r0, [r11], #-44 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #40
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #4
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #44
   LDR r0, [r11], #-44 ;(a)
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #40
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #4
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #4
   BNE Loop10_18
   ;now diagonal
   
   MOV r11, #0x30000000
   MOV r8, #-44
   MOV r12, #-40
Loop10_19
   ADD r8, #44
   ADD r12, #40
   ADD r11, r8
   LDR r0, [r11], -r8 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r6, 0x70000000
   MOV r7, r12
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   CMP r8, #396
   BNE Loop10_19
   ;now identity
   
   MOV r0, 0x50000000
   LDR r11, [r0] ;get size
   MOV r12, 0x60000000
   MOV r10, #0
   CMP r11, #6
   MOVEQ r11, 0x60000000
   BEQ Loop6_2
   CMP r11, #7
   MOVEQ r11, 0x60000000
   BEQ Loop7_2
   CMP r11, #8
   MOVEQ r11, 0x60000000
   BEQ Loop8_2
   CMP r11, #9
   MOVEQ r11, 0x60000000
   BEQ Loop9_2
   
   MOV pc, #0 ;Program end
   
Loop6_2 ;resize (10 -> 6)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r5} ;smaller
   ADD r12, #24
   ADD r11, #40
   CMP r10, #6
   BNE Loop6_2
   MOV pc, #0 ;Program end

Loop7_2 ;resize (10 -> 7)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r6} ;smaller
   ADD r12, #28
   ADD r11, #40
   CMP r10, #7
   BNE Loop7_2
   MOV pc, #0 ;Program end

Loop8_2 ;resize (10 -> 8)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r7} ;smaller
   ADD r12, #32
   ADD r11, #40
   CMP r10, #8
   BNE Loop8_2
   MOV pc, #0 ;Program end

Loop9_2 ;resize (10 -> 9)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r8} ;smaller
   ADD r12, #36
   ADD r11, #40
   CMP r10, #9
   BNE Loop9_2
   MOV pc, #0 ;Program end

Makeidentity20
   LDR r12, =Matrix_data ;r12 = address of given matrix
   LDR r9, [r12], #4 ;get size
   MOV r11, 0x50000000
   STR r9, [r11] ;store size
   MOV r11, 0x30000000 ;r11 = address of first matrix
   MOV r10, #0
   CMP r9, #11
   BEQ Loop11
   CMP r9, #12
   BEQ Loop12
   CMP r9, #13
   BEQ Loop13
   CMP r9, #14
   BEQ Loop14
   CMP r9, #15
   BEQ Loop15
   CMP r9, #16
   BEQ Loop16
   CMP r9, #17
   BEQ Loop17
   CMP r9, #18
   BEQ Loop18
   CMP r9, #19
   BEQ Loop19
   CMP r9, #20
   BEQ Loop20
   LTORG
 
Loop11 ;loop for 11 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0}
   ADD r12, #4
   STMEA r11, {r0}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #11
   BNE Loop11
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #-840 ;store 1 (11)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop12 ;loop for 12 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r1}
   ADD r12, #8
   STMEA r11, {r0 - r1}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #12
   BNE Loop12
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #-924 ;store 1 (12)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop13 ;loop for 13 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r2}
   ADD r12, #12
   STMEA r11, {r0 - r2}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #13
   BNE Loop13
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #-1008 ;store 1 (13)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop14 ;loop for 14 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r3}
   ADD r12, #16
   STMEA r11, {r0 - r3}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #14
   BNE Loop14
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #-1092 ;store 1 (14)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop15 ;loop for 15 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r4}
   ADD r12, #20
   STMEA r11, {r0 - r4}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #15
   BNE Loop15
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #84 ;store 1 (14)
   STR r0, [r10], #-1176 ;store 1 (15)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop16 ;loop for 16 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r5}
   ADD r12, #24
   STMEA r11, {r0 - r5}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #16
   BNE Loop16
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #84 ;store 1 (14)
   STR r0, [r10], #84 ;store 1 (15)
   STR r0, [r10], #-1260 ;store 1 (16)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop17 ;loop for 17 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r6}
   ADD r12, #28
   STMEA r11, {r0 - r6}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #17
   BNE Loop17
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #84 ;store 1 (14)
   STR r0, [r10], #84 ;store 1 (15)
   STR r0, [r10], #84 ;store 1 (16)
   STR r0, [r10], #-1344 ;store 1 (17)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop18 ;loop for 18 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r7}
   ADD r12, #32
   STMEA r11, {r0 - r7}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #18
   BNE Loop18
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #84 ;store 1 (14)
   STR r0, [r10], #84 ;store 1 (15)
   STR r0, [r10], #84 ;store 1 (16)
   STR r0, [r10], #84 ;store 1 (17)
   STR r0, [r10], #-1428 ;store 1 (18)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop19 ;loop for 19 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r8}
   ADD r12, #36
   STMEA r11, {r0 - r8}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #19
   BNE Loop19
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #84 ;store 1 (14)
   STR r0, [r10], #84 ;store 1 (15)
   STR r0, [r10], #84 ;store 1 (16)
   STR r0, [r10], #84 ;store 1 (17)
   STR r0, [r10], #84 ;store 1 (18)
   STR r0, [r10], #-1512 ;store 1 (19)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   MOV r11, #0x30000000
   B Loop20_1

Loop20 ;loop for 20 times
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   LDMFD r12, {r0 - r9}
   ADD r12, #40
   STMEA r11, {r0 - r9}
   ADD r11, #40
   ADD r10, #1
   CMP r10, #20
   BNE Loop20
   SUB r11, #1600
   ;store copy of given matrix
   
   MOV r10, 0x60000000 ;r10 = address of second matrix
   MOV r0, #0x00000000
   MOV r1, #0x00000000 
   MOV r2, #0x00000000 
   MOV r3, #0x00000000
   MOV r4, #0x00000000
   MOV r5, #0x00000000 
   MOV r6, #0x00000000 
   MOV r7, #0x00000000
   MOV r8, #0x00000000
   MOV r9, #0x00000000
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (1)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (2)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (3)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (4)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (5)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (6)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (7)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (8)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (9)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (10)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (11)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (12)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (13)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (14)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (15)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (16)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (17)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (18)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (19)
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 
   ADD r10, #40
   STMEA r10, {r0 - r9} ;store 0 (20)
   ADD r10, #40
   SUB r10, #1600
   
   MOV r0, #0x3F800000
   STR r0, [r10], #84 ;store 1 (1)
   STR r0, [r10], #84 ;store 1 (2)
   STR r0, [r10], #84 ;store 1 (3)
   STR r0, [r10], #84 ;store 1 (4)
   STR r0, [r10], #84 ;store 1 (5)
   STR r0, [r10], #84 ;store 1 (6)
   STR r0, [r10], #84 ;store 1 (7)
   STR r0, [r10], #84 ;store 1 (8)
   STR r0, [r10], #84 ;store 1 (9)
   STR r0, [r10], #84 ;store 1 (10)
   STR r0, [r10], #84 ;store 1 (11)
   STR r0, [r10], #84 ;store 1 (12)
   STR r0, [r10], #84 ;store 1 (13)
   STR r0, [r10], #84 ;store 1 (14)
   STR r0, [r10], #84 ;store 1 (15)
   STR r0, [r10], #84 ;store 1 (16)
   STR r0, [r10], #84 ;store 1 (17)
   STR r0, [r10], #84 ;store 1 (18)
   STR r0, [r10], #84 ;store 1 (19)
   STR r0, [r10], #-1596 ;store 1 (20)
   
   MOV r2, 0x20000000
   MOV r3, 0x10000000
   MOV r8, #0
   ADD r11, #0
   B Loop20_1

Loop20_1
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #0
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #0
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #0
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1520
   BNE Loop20_1
   SUB r11, #0
   
   MOV r8, #0
   ADD r11, #84
Loop20_2
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #80
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #80
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1440
   BNE Loop20_2
   SUB r11, #84

   MOV r8, #0
   ADD r11, #168
Loop20_3
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #160
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #160
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #160
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #160
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1360
   BNE Loop20_3
   SUB r11, #168

   MOV r8, #0
   ADD r11, #252
Loop20_4
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #240
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #240
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #240
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #240
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1280
   BNE Loop20_4
   SUB r11, #252
   
   MOV r8, #0
   ADD r11, #336
Loop20_5
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #320
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #320
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #320
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #320
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1200
   BNE Loop20_5
   SUB r11, #336
   
   MOV r8, #0
   ADD r11, #420
Loop20_6
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #400
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #400
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #400
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #400
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1120
   BNE Loop20_6
   SUB r11, #420

   MOV r8, #0
   ADD r11, #504
Loop20_7
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #480
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #480
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #480
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #480
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #1040
   BNE Loop20_7
   SUB r11, #504

   MOV r8, #0
   ADD r11, #588
Loop20_8
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #560
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #560
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #560
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #560
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #960
   BNE Loop20_8
   SUB r11, #588
   
   MOV r8, #0
   ADD r11, #672
Loop20_9
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #640
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #640
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #640
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #640
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #880
   BNE Loop20_9
   SUB r11, #672
   
   MOV r8, #0
   ADD r11, #756
Loop20_10
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #720
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #720
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #720
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #720
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #800
   BNE Loop20_10
   SUB r11, #756

   MOV r8, #0
   ADD r11, #840
Loop20_11
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #800
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #800
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #800
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #800
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #720
   BNE Loop20_11
   SUB r11, #840
   
   MOV r8, #0
   ADD r11, #924
Loop20_12
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #880
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #880
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #880
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #880
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #640
   BNE Loop20_12
   SUB r11, #924
   
   MOV r8, #0
   ADD r11, #1008
Loop20_13
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #960
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #960
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #960
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #960
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #560
   BNE Loop20_13
   SUB r11, #1008
   
   MOV r8, #0
   ADD r11, #1008
   ADD r11, #84 ;1092
Loop20_14
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1040
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #1040
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1040
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #1040
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #480
   BNE Loop20_14
   SUB r11, #1008
   SUB r11, #84 ;1092
   
   MOV r8, #0
   ADD r11, #1008
   ADD r11, #168 ;1176
Loop20_15
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1120
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #1120
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1120
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #1120
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #400
   BNE Loop20_15
   SUB r11, #1008
   SUB r11, #168 ;1176
   
   MOV r8, #0
   ADD r11, #1008
   ADD r11, #252 ;1260
Loop20_16
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1200
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #1200
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1200
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #1200
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #320
   BNE Loop20_16
   SUB r11, #1008
   SUB r11, #252 ;1260
   
   MOV r8, #0
   ADD r11, #1008
   ADD r11, #336 ;1344
Loop20_17
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1280
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #1280
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1280
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #1280
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #240
   BNE Loop20_17
   SUB r11, #1008
   SUB r11, #336 ;1344
   
   MOV r8, #0
   ADD r11, #1008
   ADD r11, #420 ;1428
Loop20_18
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1360
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #1360
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1360
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #1360
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #160
   BNE Loop20_18
   SUB r11, #1008
   SUB r11, #420 ;1428
   
   MOV r8, #0
   ADD r11, #1008
   ADD r11, #504 ;1512
Loop20_19
   ADD r8, #80
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1440
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   ADDEQ r7, #1440
   STREQ r7, [r6], #-4 ;store j
   BLEQ Eij
   LDR r0, [r11], r8 ;(a)
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1440
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   ADD r7, #1440
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #80
   BNE Loop20_19
   SUB r11, #1008
   SUB r11, #504 ;1512
   ;now upper triangle

   MOV r8, #1008
   ADD r8, #588 ;1596
Loop20_20
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #588 ;1592
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #588 ;1592
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1520
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #76
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #588 ;1592
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #588 ;1592
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1520
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #76
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #76
   BNE Loop20_20
   
   MOV r8, #1008
   ADD r8, #504 ;1512
Loop20_21
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #504 ;1512
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #504 ;1512
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1440
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #72
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #504 ;1512
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #504 ;1512
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1440
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #72
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #72
   BNE Loop20_21
   
   MOV r8, #1008
   ADD r8, #420 ;1428
Loop20_22
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #420 ;1428
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #420 ;1428
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1360
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #68
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #420 ;1428
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #420 ;1428
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1360
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #68
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #68
   BNE Loop20_22
   
   MOV r8, #1008
   ADD r8, #336 ;1344
Loop20_23
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #336 ;1344
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #336 ;1344
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1280
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #64
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #336 ;1344
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #336 ;1344
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1280
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #64
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #64
   BNE Loop20_23

   MOV r8, #1008
   ADD r8, #252 ;1260
Loop20_24
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #252 ;1260
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #252 ;1260
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1200
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #60
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #252 ;1260
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #252 ;1260
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1200
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #60
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #60
   BNE Loop20_24

   MOV r8, #1008
   ADD r8, #168 ;1176
Loop20_25
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #168 ;1176
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #168 ;1176
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1120
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #56
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #168 ;1176
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #168 ;1176
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1120
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #56
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #56
   BNE Loop20_25
   
   MOV r8, #1008
   ADD r8, #84 ;1092
Loop20_26
   SUB r8, #80
   ADD r11, #1008
   ADD r11, #84 ;1092
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #84 ;1092
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #1040
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #52
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   ADD r11, #84 ;1092
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   SUB r11, #84 ;1092
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #1040
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #52
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #52
   BNE Loop20_26
   
   MOV r8, #1008
Loop20_27
   SUB r8, #80
   ADD r11, #1008
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #960
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #48
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #1008
   LDR r0, [r11] ;(a)
   SUB r11, #1008
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #960
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #48
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #48
   BNE Loop20_27
   
   MOV r8, #924
Loop20_28
   SUB r8, #80
   ADD r11, #924
   LDR r0, [r11] ;(a)
   SUB r11, #924
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #880
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #44
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #924
   LDR r0, [r11] ;(a)
   SUB r11, #924
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #880
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #44
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #44
   BNE Loop20_28
   
   MOV r8, #840
Loop20_29
   SUB r8, #80
   ADD r11, #840
   LDR r0, [r11] ;(a)
   SUB r11, #840
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #800
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #40
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #840
   LDR r0, [r11] ;(a)
   SUB r11, #840
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #800
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #40
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #40
   BNE Loop20_29
   
   MOV r8, #756
Loop20_30
   SUB r8, #80
   ADD r11, #756
   LDR r0, [r11] ;(a)
   SUB r11, #756
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #720
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #36
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #756
   LDR r0, [r11] ;(a)
   SUB r11, #756
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #720
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #36
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #36
   BNE Loop20_30
   
   MOV r8, #672
Loop20_31
   SUB r8, #80
   ADD r11, #672
   LDR r0, [r11] ;(a)
   SUB r11, #672
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #640
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #32
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #672
   LDR r0, [r11] ;(a)
   SUB r11, #672
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #640
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #32
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #32
   BNE Loop20_31
   
   MOV r8, #588
Loop20_32
   SUB r8, #80
   ADD r11, #588
   LDR r0, [r11] ;(a)
   SUB r11, #588
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #560
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #28
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #588
   LDR r0, [r11] ;(a)
   SUB r11, #588
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #560
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #28
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #28
   BNE Loop20_32

   MOV r8, #504
Loop20_33
   SUB r8, #80
   ADD r11, #504
   LDR r0, [r11] ;(a)
   SUB r11, #504
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #480
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #24
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #504
   LDR r0, [r11] ;(a)
   SUB r11, #504
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #480
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #24
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #24
   BNE Loop20_33
   
   MOV r8, #420
Loop20_34
   SUB r8, #80
   ADD r11, #420
   LDR r0, [r11] ;(a)
   SUB r11, #420
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #400
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #20
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #420
   LDR r0, [r11] ;(a)
   SUB r11, #420
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #400
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #20
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #20
   BNE Loop20_34
   
   MOV r8, #336
Loop20_35
   SUB r8, #80
   ADD r11, #336
   LDR r0, [r11] ;(a)
   SUB r11, #336
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #320
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #16
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #336
   LDR r0, [r11] ;(a)
   SUB r11, #336
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #320
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #16
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #16
   BNE Loop20_35
   
   MOV r8, #252
Loop20_36
   SUB r8, #80
   ADD r11, #252
   LDR r0, [r11] ;(a)
   SUB r11, #252
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #240
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #12
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #252
   LDR r0, [r11] ;(a)
   SUB r11, #252
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #240
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #12
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #12
   BNE Loop20_36
   
   MOV r8, #168
Loop20_37
   SUB r8, #80
   ADD r11, #168
   LDR r0, [r11] ;(a)
   SUB r11, #168
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #160
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #8
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #168
   LDR r0, [r11] ;(a)
   SUB r11, #168
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #160
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #8
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #8
   BNE Loop20_37
   
   MOV r8, #84
Loop20_38
   SUB r8, #80
   ADD r11, #84
   LDR r0, [r11] ;(a)
   SUB r11, #84
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;compare a and d
   CMP r0, #0x00000000
   MOVEQ r0, #1 ;when a is 0
   MOVNE r0, #0
   CMP r1, #0x00000000
   MOVNE r1, #1 ;when d is non-0
   MOVEQ r1, #0
   ADD r1, r0
   CMP r1, #2 ;when a is 0 and d is non-0
   MOVEQ r6, 0x70000000
   MOVEQ r7, #80
   STREQ r7, [r6], #4 ;store i
   MOVEQ r7, r8
   SUBEQ r7, #4
   STREQ r7, [r6], #4 ;store j
   BLEQ Eij
   ADD r11, #84
   LDR r0, [r11] ;(a)
   SUB r11, #84
   ADD r11, r8
   LDR r1, [r11], -r8 ;(d)
   ;recompare a and d
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get d/a
   CMP r4, #0x80000000
   SUBGT r4, #0x80000000 ;negative to positive
   ADDLT r4, #0x80000000 ;positive to negative
   ;get -d/a
   MOV r6, 0x70000000
   MOV r7, #80
   STR r7, [r6], #4 ;store i
   MOV r7, r8
   SUB r7, #4
   STR r7, [r6], #4 ;store j
   STR r4, [r6], #-8 ;store k
   BL Eijk
   CMP r8, #4
   BNE Loop20_38

   MOV r11, #0x30000000
   MOV r8, #-84
   MOV r12, #-80
Loop20_39
   ADD r8, #84
   ADD r12, #80
   ADD r11, r8
   LDR r0, [r11], -r8 ;a
   MOV r1, #0x3F800000
   STR r1, [r2], #4
   STR r0, [r2], #-4
   BL Division
   LDR r4, [r3] ;get 1/a
   MOV r6, 0x70000000
   MOV r7, r12
   STR r7, [r6], #4 ;store i
   MOV r7, r0
   STR r4, [r6], #-4 ;store k
   BL Eik
   CMP r12, #1520
   BNE Loop20_39
   ;now identity
   
   MOV r0, 0x50000000
   LDR r11, [r0] ;get size
   MOV r12, 0x60000000
   MOV r10, #0
   CMP r11, #11
   MOVEQ r11, 0x60000000
   BEQ Loop11_2
   CMP r11, #12
   MOVEQ r11, 0x60000000
   BEQ Loop12_2
   CMP r11, #13
   MOVEQ r11, 0x60000000
   BEQ Loop13_2
   CMP r11, #14
   MOVEQ r11, 0x60000000
   BEQ Loop14_2
   CMP r11, #15
   MOVEQ r11, 0x60000000
   BEQ Loop15_2
   CMP r11, #16
   MOVEQ r11, 0x60000000
   BEQ Loop16_2
   CMP r11, #17
   MOVEQ r11, 0x60000000
   BEQ Loop17_2
   CMP r11, #18
   MOVEQ r11, 0x60000000
   BEQ Loop18_2
   CMP r11, #19
   MOVEQ r11, 0x60000000
   BEQ Loop19_2

   MOV pc, #0 ;Program end
   LTORG

Loop11_2 ;resize (20 -> 11)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0} ;smaller
   ADD r12, #4
   ADD r11, #40
   CMP r10, #11
   BNE Loop11_2
   MOV pc, #0 ;Program end
   
Loop12_2 ;resize (20 -> 12)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r1} ;smaller
   ADD r12, #8
   ADD r11, #40
   CMP r10, #12
   BNE Loop12_2
   MOV pc, #0 ;Program end

Loop13_2 ;resize (20 -> 13)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r2} ;smaller
   ADD r12, #12
   ADD r11, #40
   CMP r10, #13
   BNE Loop13_2
   MOV pc, #0 ;Program end

Loop14_2 ;resize (20 -> 14)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r3} ;smaller
   ADD r12, #16
   ADD r11, #40
   CMP r10, #14
   BNE Loop14_2
   MOV pc, #0 ;Program end

Loop15_2 ;resize (20 -> 15)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r4} ;smaller
   ADD r12, #20
   ADD r11, #40
   CMP r10, #15
   BNE Loop15_2
   MOV pc, #0 ;Program end

Loop16_2 ;resize (20 -> 16)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r5} ;smaller
   ADD r12, #24
   ADD r11, #40
   CMP r10, #16
   BNE Loop16_2
   MOV pc, #0 ;Program end

Loop17_2 ;resize (20 -> 17)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r6} ;smaller
   ADD r12, #28
   ADD r11, #40
   CMP r10, #17
   BNE Loop17_2
   MOV pc, #0 ;Program end

Loop18_2 ;resize (20 -> 18)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r7} ;smaller
   ADD r12, #32
   ADD r11, #40
   CMP r10, #18
   BNE Loop18_2
   MOV pc, #0 ;Program end

Loop19_2 ;resize (20 -> 19)
   ADD r10, #1
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r9} ;smaller
   ADD r12, #40
   ADD r11, #40
   LDMFD r11, {r0 - r9} ;bigger
   STMEA r12, {r0 - r8} ;smaller
   ADD r12, #36
   ADD r11, #40
   CMP r10, #19
   BNE Loop19_2
   MOV pc, #0 ;Program end

Eijk
   STMFD sp!, {r0-r12, lr}

   MOV r0, #0
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0
   ;reset register

   MOV r0, 0x50000000
   LDR r12, [r0] ;get size
   MOV r1, 0x70000000
   LDR r2, [r1], #4 ;get i
   LDR r3, [r1], #4 ;get j
   LDR r4, [r1], #-8 ;get k
   
   MOV r5, 0x30000000
   MOV r6, 0x60000000
   
   MOV r7, 0x20000000
   MOV r8, 0x10000000

   MOV r1, #-4
   B Eijk2
   
Eijk2 ;Eijk loop
   ADD r1, #4
   
   ADD r9, r5, r2
   ADD r9, r1
   ;r9 = address of ?th element of ith row of 1st matrix
   LDR r10, [r9];get s[i][?]   
   STR r10, [r7], #4
   STR r4, [r7], #-4
   BL Multiplication
   LDR r11, [r8]
   ;get k x s[i][2]
   ADD r9, r5, r3
   ADD r9, r1
   ;r9 = address of ?th element of jth row of 1st matrix
   LDR r10, [r9];get s[j][?]   
   STR r10, [r7], #4
   STR r11, [r7], #-4
   BL Addition
   LDR r11, [r8]
   ;get k x s[i][?] + s[j][?]
   STR r11, [r9]
   ;store k x s[i][?] + s[j][?] to s[j][?]
   ADD r9, r6, r2
   ADD r9, r1
   ;r9 = address of ?th element of ith row of 2nd matrix
   LDR r10, [r9];get s[i][?]   
   STR r10, [r7], #4
   STR r4, [r7], #-4
   BL Multiplication
   LDR r11, [r8]
   ;get k x s[i][?]
   ADD r9, r6, r3
   ADD r9, r1
   ;r9 = address of ?th element of jth row of 2nd matrix
   LDR r10, [r9];get s[j][?]   
   STR r10, [r7], #4
   STR r11, [r7], #-4
   BL Addition
   LDR r11, [r8]
   ;get k x s[i][?] + s[j][?]
   STR r11, [r9]
   ;store k x s[i][?] + s[j][?] to s[j][?]
   LSR r1, #2
   ADD r1, #1
   CMP r12, r1 ;if size is ?
   LDMFDEQ sp!, {r0-r12, pc} ;calculation is done
   SUBNE r1, #1
   LSLNE r1, #2
   BNE Eijk2
   
Eik
   STMFD sp!, {r0-r12, lr}

   MOV r0, #0
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0
   ;reset register

   MOV r0, 0x50000000
   LDR r12, [r0] ;get size
   MOV r1, 0x70000000
   LDR r2, [r1], #4 ;get i
   LDR r4, [r1], #-4 ;get k
   
   MOV r5, 0x30000000
   MOV r6, 0x60000000
   
   MOV r7, 0x20000000
   MOV r8, 0x10000000

   MOV r1, #-4
   B Eik2

   LDMFD sp!, {r0-r12, pc}
   
Eik2 ;Eik loop
   ADD r1, #4
   
   ADD r9, r5, r2
   ADD r9, r1
   ;r9 = address of ?th element of ith row of 1st matrix
   LDR r10, [r9] ;get s[i][?]   
   STR r10, [r7], #4
   STR r4, [r7], #-4
   BL Multiplication
   LDR r11, [r8]
   ;get k x s[i][?]
   STR r11, [r9]
   ;store k x s[i][?] to s[j][?]
   ADD r9, r6, r2
   ADD r9, r1
   ;r9 = address of ?th element of ith row of 2nd matrix
   LDR r10, [r9] ;get s[i][?]   
   STR r10, [r7], #4
   STR r4, [r7], #-4
   BL Multiplication
   LDR r11, [r8]
   ;get k x s[i][?]
   STR r11, [r9]
   ;store k x s[i][?] to s[j][?]
   LSR r1, #2
   ADD r1, #1
   CMP r12, r1 ;if size is ?
   LDMFDEQ sp!, {r0-r12, pc} ;calculation is done
   SUBNE r1, #1
   LSLNE r1, #2
   BNE Eik2
   
Eij
   STMFD sp!, {r0-r12, lr}
   
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0 ;reset register
   
   MOV r0, 0x50000000
   LDR r6, [r0] ;get size
   MOV r1, 0x70000000
   LDR r7, [r1], #4 ;get i
   LDR r8, [r1], #-4 ;get j
   ADD r7, 0x30000000
   ADD r8, 0x30000000
   LDR r9, [r1], #4 ;get i
   LDR r10, [r1], #-4 ;get j
   ADD r9, 0x60000000
   ADD r10, 0x60000000
   MOV r0, #0
   MOV r1, #0
   B Eij2

Eij2 ;Eij loop
   ADD r1, #1
   
   LDR r11, [r7] ;get m1[i][?]
   LDR r12, [r8] ;get m1[j][?]
   STR r11, [r8], #4
   STR r12, [r7], #4 ;swap m1[][?]
   LDR r11, [r9] ;get m2[i][?]
   LDR r12, [r10] ;get m2[j][?]
   STR r11, [r10], #4
   STR r12, [r9], #4 ;swap m2[][?]
   CMP r1, r6 ;when ? swap is done
   LDMFDEQ sp!, {r0-r12, pc}
   BNE Eij2
   
Addition
   STMFD sp!, {r0-r12, lr}
   MOV r0, #0
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0
   ;reset register
   
   MOV r0, 0x10000000 ;r0 = address for result
   MOV r1, 0x20000000 ;r1 = address for operands
   LDR r2, [r1], #4 ;load 1st operand
   LDR r3, [r1], #-4 ;load 2nd operand
   
   CMP r2, #0x00000000
   STREQ r3, [r0] ;when r2 = 0 so r2 + r3 = r3
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r2, #0x80000000
   STREQ r3, [r0] ;when r2 = 0 so r2 + r3 = r3
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r3, #0x00000000
   STREQ r2, [r0] ;when r3 = 0 so r2 + r3 = r2
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r3, #0x80000000
   STREQ r2, [r0] ;when r3 = 0 so r2 + r3 = r2
   LDMFDEQ sp!, {r0-r12, pc}
   
   MOV r4, r2
   LSR r4, #31
   ;r4 = sign part of first operand
   
   MOV r5, r3
   LSR r5, #31
   ;r5 = sign part of second operand
   
   MOV r6, r2
   LSL r6, #1
   LSR r6, #24
   ;r6 = exponent part of first operand
   
   MOV r7, r3
   LSL r7, #1
   LSR r7, #24
   ;r7 = exponent part of second operand
   
   MOV r8, r2
   LSL r8, #9
   LSR r8, #9
   ADD r8, #0x00800000 ;insert '1' bit to mantissa
   ;r8 = mantissa part of first operand
   
   MOV r9, r3
   LSL r9, #9
   LSR r9, #9
   ADD r9, #0x00800000 ;insert '1' bit to mantissa
   ;r9 = mantissa part of second operand
   
   ADD r2, r4, r5
   CMP r2, #0
   MOVEQ r2, #0 ;postive + positive = positive
   CMP r2, #1
   BLEQ compare
   CMP r2, #2
   MOVEQ r2, #1 ;negative + negative = negative
   ;r2 = new sign
   
   SUB r10, r6, r7
   ;r10 = difference of two exponent part (positive)
   
   CMP r10, #0
   LSRGT r9, r10
   RSBLT r10, r10, #0
   LSRLT r8, r10
   ;shift mantissa whose exponent is smaller
   
   ADD r12, r4, r5
   CMP r12, #0
   ADDEQ r11, r8, r9 ;positive + positive
   CMP r12, #1
   BLEQ absolute
   CMP r12, #2
   ADDEQ r11, r8, r9 ;negative + negative
   ;r11 = sum of sub of two mantissa (new mantissa)
   
   CMP r6, r7
   MOVGE r1, r6
   MOVLT r1, r7
   ;r1 = big value of two exponent (new exponent)
   
   BL normalize
   ;normalize r11 and r1
   
   LSL r11, #9
   LSR r11, #9
   ;first 1 of mantissa is discarded
   
   MOV r3, r2
   LSL r3, #8
   ADD r3, r1
   LSL r3, #23
   ADD r3, r11
   
   STR r3, [r0]
   ;store result of addition
   
   LDMFD sp!, {r0-r12, pc}

Subtraction ;r0 = address for result, r1 = address for operands
   STMFD sp!, {r0-r12, lr}
   MOV r0, #0
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0
   ;reset register
   
   MOV r0, 0x10000000 ;r0 = address for result
   MOV r1, 0x20000000;r1 = address for operands
   LDR r2, [r1], #4 ;load 1st operand
   LDR r3, [r1], #-4 ;load 2nd operand
   
   CMP r3, #0x00000000
   STREQ r2, [r0] ;when r3 = 0 so r2 - r3 = r2
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r3, #0x80000000
   STREQ r2, [r0] ;when r3 = 0 so r2 - r3 = r2
   LDMFDEQ sp!, {r0-r12, pc}
   
   MOV r4, r2
   LSR r4, #31
   ;r4 = sign part of first operand
   
   MOV r5, r3
   LSR r5, #31
   ;r5 = sign part of second operand
   CMP r5, #0
   MOVEQ r5, #1 ;positive to negative
   MOVNE r5, #0 ;negative to positive
   
   MOV r6, r2
   LSL r6, #1
   LSR r6, #24
   ;r6 = exponent part of first operand
   
   MOV r7, r3
   LSL r7, #1
   LSR r7, #24
   ;r7 = exponent part of second operand
   
   MOV r8, r2
   LSL r8, #9
   LSR r8, #9
   ADD r8, #0x00800000 ;insert '1' bit to mantissa
   ;r8 = mantissa part of first operand
   
   MOV r9, r3
   LSL r9, #9
   LSR r9, #9
   ADD r9, #0x00800000 ;insert '1' bit to mantissa
   ;r9 = mantissa part of second operand
   
   ADD r2, r4, r5
   CMP r2, #0
   MOVEQ r2, #0 ;postive + positive = positive
   CMP r2, #1
   BLEQ compare
   CMP r2, #2
   MOVEQ r2, #1 ;negative + negative = negative
   ;r2 = new sign
   
   SUB r10, r6, r7
   ;r10 = difference of two exponent part (positive)
   
   CMP r10, #0
   LSRGT r9, r10
   RSBLT r10, r10, #0
   LSRLT r8, r10
   ;shift mantissa whose exponent is smaller
   
   ADD r12, r4, r5
   CMP r12, #0
   ADDEQ r11, r8, r9 ;positive + positive
   CMP r12, #1
   BLEQ absolute
   CMP r12, #2
   ADDEQ r11, r8, r9 ;negative + negative
   ;r11 = sum of sub of two mantissa (new mantissa)
   
   CMP r6, r7
   MOVGE r1, r6
   MOVLT r1, r7
   ;r1 = big value of two exponent (new exponent)
   
   BL normalize
   ;normalize r11 and r1
   
   LSL r11, #9
   LSR r11, #9
   ;first 1 of mantissa is discarded
   
   MOV r3, r2
   LSL r3, #8
   ADD r3, r1
   LSL r3, #23
   ADD r3, r11
   
   STR r3, [r0]
   ;store result of subtraction
   
   LDMFD sp!, {r0-r12, pc}

Multiplication ;r0 = address for result, r1 = address for operands
   STMFD sp!, {r0-r12, lr}
   MOV r0, #0
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0
   ;reset register
   
   MOV r0, 0x10000000 ;r0 = address for result
   MOV r1, 0x20000000 ;r1 = address for operands
   LDR r2, [r1], #4 ;load 1st operand
   LDR r3, [r1], #-4 ;load 2nd operand
   
   CMP r2, #0x00000000
   STREQ r2, [r0] ;when r2 = 0 so r2 * r3 = 0
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r2, #0x80000000
   STREQ r2, [r0] ;when r2 = 0 so r2 * r3 = 0
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r3, #0x00000000
   STREQ r3, [r0] ;when r3 = 0 so r2 * r3 = 0
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r3, #0x80000000
   STREQ r3, [r0] ;when r3 = 0 so r2 * r3 = 0
   LDMFDEQ sp!, {r0-r12, pc}
   
   MOV r4, r2
   LSR r4, #31
   ;r4 = sign part of first operand
   
   MOV r5, r3
   LSR r5, #31
   ;r5 = sign part of second operand
   
   MOV r6, r2
   LSL r6, #1
   LSR r6, #24
   ;r6 = exponent part of first operand
   
   MOV r7, r3
   LSL r7, #1
   LSR r7, #24
   ;r7 = exponent part of second operand
   
   MOV r8, r2
   LSL r8, #9
   LSR r8, #9
   ADD r8, #0x00800000 ;insert '1' bit to mantissa
   ;r8 = mantissa part of first operand
   
   MOV r9, r3
   LSL r9, #9
   LSR r9, #9
   ADD r9, #0x00800000 ;insert '1' bit to mantissa
   ;r9 = mantissa part of second operand
   
   ADD r2, r4, r5
   CMP r2, #0
   MOVEQ r2, #0 ;postive * positive = positive
   CMP r2, #1
   MOVEQ r2, #1 ;postive * negative = negative
   CMP r2, #2
   MOVEQ r2, #0 ;negative * negative = positive
   ;r2 = new sign
   
   ADD r1, r6, r7
   SUB r1, #127
   ;r1 = new exponent
   
   SUB r10, r6, r7
   ;r10 = difference of two exponent part (positive)
      
   BL booth
   ;r11 = mul of two mantissa (new mantissa)
   
   BL normalize
   ;normalize r11 and r1
   
   LSL r11, #9
   LSR r11, #9
   ;first 1 of mantissa is discarded
   
   MOV r3, r2
   LSL r3, #8
   ADD r3, r1
   LSL r3, #23
   ADD r3, r11
   
   STR r3, [r0]
   ;store result of multiplication
   
   LDMFD sp!, {r0-r12, pc}

Division ;r0 = address for result, r1 = address for operands
   STMFD sp!, {r0-r12, lr}
   MOV r0, #0
   MOV r1, #0
   MOV r2, #0
   MOV r3, #0
   MOV r4, #0
   MOV r5, #0
   MOV r6, #0
   MOV r7, #0
   MOV r8, #0
   MOV r9, #0
   MOV r10, #0
   MOV r11, #0
   MOV r12, #0
   ;reset register
   
   MOV r0, 0x10000000 ;r0 = address for result
   MOV r1, 0x20000000 ;r1 = address for operands
   LDR r2, [r1], #4 ;load 1st operand
   LDR r3, [r1], #-4 ;load 2nd operand
   
   CMP r2, #0x00000000
   STREQ r2, [r0] ;when r2 = 0 so r2 / r3 = 0
   LDMFDEQ sp!, {r0-r12, pc}
   CMP r2, #0x80000000
   STREQ r2, [r0] ;when r2 = 0 so r2 / r3 = 0
   LDMFDEQ sp!, {r0-r12, pc}
   
   MOV r4, r2
   LSR r4, #31
   ;r4 = sign part of first operand
   
   MOV r5, r3
   LSR r5, #31
   ;r5 = sign part of second operand
   
   MOV r6, r2
   LSL r6, #1
   LSR r6, #24
   ;r6 = exponent part of first operand
   
   MOV r7, r3
   LSL r7, #1
   LSR r7, #24
   ;r7 = exponent part of second operand
   
   MOV r8, r2
   LSL r8, #9
   LSR r8, #9
   ADD r8, #0x00800000 ;insert '1' bit to mantissa
   ;r8 = mantissa part of first operand
   
   MOV r9, r3
   LSL r9, #9
   LSR r9, #9
   ADD r9, #0x00800000 ;insert '1' bit to mantissa
   ;r9 = mantissa part of second operand
   
   ADD r2, r4, r5
   CMP r2, #0
   MOVEQ r2, #0 ;postive / positive = positive
   CMP r2, #1
   MOVEQ r2, #1 ;postive / negative = negative
   CMP r2, #2
   MOVEQ r2, #0 ;negative / negative = positive
   ;r2 = new sign
   
   SUB r1, r6, r7
   ADD r1, #127
   ;r1 = new exponent
   
   SUB r10, r6, r7
   ;r10 = difference of two exponent part (positive)
      
   BL binary
   ;r11 = div of two mantissa (new mantissa)
   
   BL normalize
   ;normalize r11 and r1
   
   LSL r11, #9
   LSR r11, #9
   ;first 1 of mantissa is discarded
   
   MOV r3, r2
   LSL r3, #8
   ADD r3, r1
   LSL r3, #23
   ADD r3, r11
   
   STR r3, [r0]
   ;store result of multiplication
   
   LDMFD sp!, {r0-r12, pc}

compare ;for additon and subtraction
   CMP r6, r7
   MOVGT r2, r4
   MOVLT r2, r5 ;new sign bit = sign bit which has bigger exponent 
   CMPEQ r8, r9
   MOVGT r2, r4
   MOVLT r2, r5 ;new sign bit = sign bit which has bigger mantissa (exponent is same)
   MOVEQ r2, #0 ;a + (-a) = 0
   STREQ r2, [r0] ;store 0 (only exeception)
   LDMFDEQ sp!, {r0-r12, pc}
   MOV pc, lr

absolute ;for additon and subtraction
   CMP r8, r9
   SUBGE r11, r8, r9
   SUBLT r11, r9, r8 ;|positive + negative| 
   MOV pc, lr

normalize ;for additon, subtraction, multiplication and division
   MOV   r12, r11
   CMP r12, #0x00000000
   MOVEQ pc, lr
   
   CMP r12, #0x01000000
   LSRGE r11, #1
   ADDGE r1, #1
   BGE normalize
   
   CMP r12, #0x00800000
   LSLLT r11, #1
   SUBLT r1, #1
   BLT normalize
   MOVGE pc, lr
   ;LSR mantissa and ADD exponenet until normalized
   ;or LSL mantissa and SUB exponenet until normalized 

booth ;for multiplication. needs r8(first mantissa), r9(second mantissa), r11(result mantisaa)
   LSL r8, #7 ;24bit to 31bit (has 1st bit to 31th bit)
   LSL r9, #7 ;24bit to 31bit (has 1st bit to 31th bit)
   
   CMP r9, #0x40000000 ;find 32th bit
   ADDGE r11, r8
   SUBGE r9, #0x40000000
   
   CMP r9, #0x20000000 ;find 31th bit
   ADDGE r11, r8, LSR #1
   SUBGE r9, #0x20000000
   
   CMP r9, #0x10000000 ;find 30th bit
   ADDGE r11, r8, LSR #2
   SUBGE r9, #0x10000000
   
   CMP r9, #0x08000000 ;find 29th bit
   ADDGE r11, r8, LSR #3
   SUBGE r9, #0x08000000
   
   CMP r9, #0x04000000 ;find 28th bit
   ADDGE r11, r8, LSR #4
   SUBGE r9, #0x04000000

   CMP r9, #0x02000000 ;find 27th bit
   ADDGE r11, r8, LSR #5
   SUBGE r9, #0x02000000
   
   CMP r9, #0x01000000 ;find 26th bit
   ADDGE r11, r8, LSR #6
   SUBGE r9, #0x01000000
   
   CMP r9, #0x00800000 ;find 25th bit
   ADDGE r11, r8, LSR #7
   SUBGE r9, #0x00800000
   
   CMP r9, #0x00400000 ;find 24th bit
   ADDGE r11, r8, LSR #8
   SUBGE r9, #0x00400000

   CMP r9, #0x00200000 ;find 23th bit
   ADDGE r11, r8, LSR #9
   SUBGE r9, #0x00200000
   
   CMP r9, #0x00100000 ;find 22th bit
   ADDGE r11, r8, LSR #10
   SUBGE r9, #0x00100000
   
   CMP r9, #0x00080000 ;find 21th bit
   ADDGE r11, r8, LSR #11
   SUBGE r9, #0x00080000
   
   CMP r9, #0x00040000 ;find 20th bit
   ADDGE r11, r8, LSR #12
   SUBGE r9, #0x00040000

   CMP r9, #0x00020000 ;find 19th bit
   ADDGE r11, r8, LSR #13
   SUBGE r9, #0x00020000
   
   CMP r9, #0x00010000 ;find 18th bit
   ADDGE r11, r8, LSR #14
   SUBGE r9, #0x00010000
   
   CMP r9, #0x00008000 ;find 17th bit
   ADDGE r11, r8, LSR #15
   SUBGE r9, #0x00008000
   
   CMP r9, #0x00004000 ;find 16th bit
   ADDGE r11, r8, LSR #16
   SUBGE r9, #0x00004000

   CMP r9, #0x00002000 ;find 15th bit
   ADDGE r11, r8, LSR #17
   SUBGE r9, #0x00002000
   
   CMP r9, #0x00001000 ;find 14th bit
   ADDGE r11, r8, LSR #18
   SUBGE r9, #0x00001000
   
   CMP r9, #0x00000800 ;find 13th bit
   ADDGE r11, r8, LSR #19
   SUBGE r9, #0x00000800
   
   CMP r9, #0x00000400 ;find 12th bit
   ADDGE r11, r8, LSR #20
   SUBGE r9, #0x00000400

   CMP r9, #0x00000200 ;find 11th bit
   ADDGE r11, r8, LSR #21
   SUBGE r9, #0x00000200
   
   CMP r9, #0x00000100 ;find 10th bit
   ADDGE r11, r8, LSR #22
   SUBGE r9, #0x00000100
   
   CMP r9, #0x00000080 ;find 9th bit
   ADDGE r11, r8, LSR #23
   SUBGE r9, #0x00000080
   
   CMP r9, #0x00000040 ;find 8th bit
   ADDGE r11, r8, LSR #24
   SUBGE r9, #0x00000040
   
   LSR r11, #7 ;32bit to 25bit 
   
   MOV pc, lr
   
binary ;for division. needs r8(first mantissa), r9(second mantissa), r11(result mantisaa)
   LSL r8, #7 ;24bit to 31bit (has 1st bit to 31th bit)
   LSL r9, #7 ;24bit to 31bit (has 1st bit to 31th bit)
   
   CMP r8, r9
   ADDGE r11, #0x80000000; + 0x80000000 (find 32th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x40000000; + 0x40000000 (find 31th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x20000000; + 0x20000000 (find 30th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x10000000; + 0x10000000 (find 29th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x08000000; + 0x08000000 (find 28th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x04000000; + 0x04000000 (find 27th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x02000000; + 0x02000000 (find 26th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x01000000; + 0x01000000 (find 25th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00800000; + 0x00800000 (find 24th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00400000; + 0x00400000 (find 23th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00200000; + 0x00200000 (find 22th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00100000; + 0x00100000 (find 21th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00080000; + 0x00080000 (find 20th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00040000; + 0x00040000 (find 19th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00020000; + 0x00020000 (find 18th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00010000; + 0x00010000 (find 17th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00008000; + 0x00008000 (find 16th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00004000; + 0x00004000 (find 15th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00002000; + 0x00002000 (find 14th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00001000; + 0x00001000 (find 13th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00000800; + 0x00000800 (find 12th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00000400; + 0x00000400 (find 11th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00000200; + 0x00000200 (find 10th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   CMP r8, r9
   ADDGE r11, #0x00000100; + 0x00000100 (find 9th bit)
   SUBGE r8, r9
   LSR r9, #1
   
   LSR r11, #8 ;32bit to 24bit 
   
   MOV pc, lr

;Result & 0x10000000 ;adrress for operation result 
	
;Operand & 0x20000000 ;address for 2 operands
      
;Matrix_1 & 0x30000000 ;address for 1st matrix (matrix -> identity matrix)
	
;Matrix_2 & 0x60000000 ;address for 2nd matrix (identity matrix -> inverse matrix) (same as result data)

;Size & 0x50000000 ;address for matrix size
	
;Ecommand & 0x70000000 ;address for i, j, k of Eij or Eijk or Eik

Result_data & 0x60000000 ;label for output
   
    END  